import ValidationService from "./validation.service.js";
import UserModel from "../models/user.model.js";
import { comparePassword, hashPassword } from "../utils/encrypted.js";
import { createSession } from "../utils/auth.js";
import { asegurarStringEnMinusculas } from "../utils/utilis.js";
import FormatterResponseService from "../utils/FormatterResponseService.js";

/**
 * @class UserService
 * @description Servicio para operaciones de negocio relacionadas con usuarios
 */
export default class UserService {
  /**
   * @static
   * @async
   * @method login
   * @description Iniciar sesi√≥n de usuario
   * @param {Object} datos - Datos de login
   * @returns {Object} Resultado de la operaci√≥n
   */
  static async login(datos) {
    try {
      console.log("üîç [login] Iniciando proceso de login...");

      // 1. Validar datos de entrada
      const validacion = ValidationService.validateLogin(datos);
      if (!validacion.isValid) {
        console.error("‚ùå Validaci√≥n de login fallida:", validacion.errors);
        return FormatterResponseService.validationError(
          validacion.errors,
          "Error de validaci√≥n en login"
        );
      }

      // 2. Buscar usuario en la base de datos
      const email = asegurarStringEnMinusculas(datos.email);
      console.log("üìß Buscando usuario:", email);

      const respuestaModel = await UserModel.loginUser(email);

      // Si el modelo ya retorna un formato de error, lo propagamos
      if (FormatterResponseService.isError(respuestaModel)) {
        console.error("‚ùå Error en modelo login:", respuestaModel);
        return respuestaModel;
      }

      const user = respuestaModel.data;
      console.log("‚úÖ Usuario encontrado:", user.nombres, user.apellidos);

      // 3. Validar contrase√±a
      console.log("üîê Validando contrase√±a...");
      console.log("üìù Contrase√±a ingresada:", datos.password);
      console.log("üìù Contrase√±a almacenada", user.password);
      const validatePassword = await comparePassword(
        datos.password,
        user.password
      );

      if (!validatePassword) {
        console.error("‚ùå Contrase√±a inv√°lida para usuario:", email);
        throw FormatterResponseService.unauthorized(
          "Correo o contrase√±a inv√°lida"
        );
      }

      // 4. Crear token de sesi√≥n
      console.log("üé´ Creando token de sesi√≥n...");
      const token = createSession({
        object: {
          id: user.id,
          apellidos: user.apellidos,
          nombres: user.nombres,
          roles: user.roles,
          ...(user.id_pnf && { id_pnf: user.id_pnf }), // ‚úÖ Solo agrega si existe
        },
      });

      console.log(
        "‚úÖ Login exitoso para usuario:",
        user.nombres,
        user.apellidos
      );

      // 5. Preparar respuesta exitosa
      return FormatterResponseService.success(
        {
          token: token,
          user: {
            id: user.id,
            apellidos: user.apellidos,
            nombres: user.nombres,
            primera_vez: user.primera_vez,
            roles: user.roles,
          },
        },
        "Inicio de sesi√≥n exitoso",
        {
          status: 200,
          title: "Login Exitoso",
        }
      );
    } catch (error) {
      console.error("üí• Error en servicio login:", error);

      // Re-lanza el error para que el controlador lo maneje
      throw error;
    }
  }

  /**
   * @static
   * @async
   * @method cambiarContrase√±a
   * @description Cambiar contrase√±a del usuario
   * @param {Object} datos - Datos para cambiar contrase√±a
   * @param {Object} usuarioActual - Usuario actual autenticado
   * @returns {Object} Resultado de la operaci√≥n
   */
  static async cambiarContrase√±a(datos, usuarioActual) {
    try {
      console.log("üîç [cambiarContrase√±a] Iniciando cambio de contrase√±a...");

      if (process.env.MODE === "DEVELOPMENT") {
        console.log("üìù Datos recibidos:", {
          datos: datos,
          usuarioActual: {
            id: usuarioActual.id,
            nombres: usuarioActual.nombres,
            apellidos: usuarioActual.apellidos,
          },
        });
      }

      // 1. Validar datos de entrada
      const validacion = ValidationService.validateContrasenia(datos);

      if (!validacion.isValid) {
        console.error(
          "‚ùå Validaci√≥n de contrase√±a fallida:",
          validacion.errors
        );
        return FormatterResponseService.validationError(
          validacion.errors,
          "Error de validaci√≥n en cambio de contrase√±a"
        );
      }
      console.log("‚úÖ Validaci√≥n de datos exitosa.");

      console.log("üîç Obteniendo datos del usuario para validaci√≥n...");
      const respuestaUsuario = await UserModel.obtenerUsuarioPorId(
        usuarioActual.id
      );
      console.log(
        "‚úÖ Datos del usuario obtenidos para validaci√≥n: ",
        respuestaUsuario.data[0]
      );
      const { password } = respuestaUsuario.data[0];

      // 2. Validar contrase√±a actual
      console.log("üîê Validando contrase√±a actual...");
      const validatePassword = await comparePassword(
        datos.antiguaPassword,
        password
      );

      if (!validatePassword) {
        console.error(
          "‚ùå Contrase√±a actual incorrecta para usuario:",
          usuarioActual.id
        );
        return FormatterResponseService.unauthorized(
          "La contrase√±a actual es incorrecta"
        );
      }

      // 3. Hashear nueva contrase√±a
      console.log("üîí Hasheando nueva contrase√±a...");
      const passwordHash = await hashPassword(datos.password);

      // 4. Cambiar contrase√±a en la base de datos
      console.log("üíæ Actualizando contrase√±a en base de datos...");
      const respuestaModel = await UserModel.cambiarContrase√±a(
        usuarioActual.id,
        passwordHash
      );

      if (FormatterResponseService.isError(respuestaModel)) {
        console.error("‚ùå Error en modelo cambiar contrase√±a:", respuestaModel);
        return respuestaModel;
      }

      console.log(
        "‚úÖ Contrase√±a cambiada exitosamente para usuario:",
        usuarioActual.id
      );

      return FormatterResponseService.success(
        null,
        "Contrase√±a cambiada exitosamente",
        {
          status: 200,
          title: "Contrase√±a Actualizada",
        }
      );
    } catch (error) {
      console.error("üí• Error en servicio cambiar contrase√±a:", error);

      if (error.name === "ValidationError") {
        return FormatterResponseService.validationError(
          error.details || [],
          error.message
        );
      }

      // Re-lanza el error para que el controlador lo maneje
      throw error;
    }
  }

  /**
   * @static
   * @async
   * @method verificarSesion
   * @description Verificar la sesi√≥n del usuario
   * @param {Object} user - Usuario autenticado
   * @returns {Object} Resultado de la operaci√≥n
   */
  static async verificarSesion(user) {
    try {
      if (!user) {
        FormatterResponseService.unauthorized("Usuario no autenticado");
      }
      return FormatterResponseService.success(
        user,
        "Sesi√≥n verificada exitosamente",
        {
          status: 200,
          title: "Sesi√≥n Activa",
          verifiedAt: new Date().toISOString(),
          userStatus: "active",
        }
      );
    } catch (error) {
      console.error("üí• Error en servicio verificar sesi√≥n:", error);

      if (["ECONNREFUSED", "ETIMEDOUT"].includes(error.code)) {
        return FormatterResponseService.error(
          "Error de conexi√≥n con la base de datos",
          503,
          "DATABASE_UNAVAILABLE"
        );
      }

      // Re-lanza el error para que el controlador lo maneje
      throw error;
    }
  }

  /**
   * @static
   * @async
   * @method obtenerPerfil
   * @description Obtener perfil del usuario
   * @param {number} userId - ID del usuario
   * @returns {Object} Resultado de la operaci√≥n
   */
  static async obtenerPerfil(userId) {
    try {
      console.log("üîç [obtenerPerfil] Obteniendo perfil para usuario:", userId);

      // Validar ID de usuario
      const idValidation = ValidationService.validateId(userId, "usuario");
      if (!idValidation.isValid) {
        console.error("‚ùå Validaci√≥n de ID fallida:", idValidation.errors);
        return FormatterResponseService.validationError(
          idValidation.errors,
          "ID de usuario inv√°lido"
        );
      }

      const respuestaModel = await UserModel.obtenerUsuarioPorId(userId);

      if (FormatterResponseService.isError(respuestaModel)) {
        console.error("‚ùå Error en modelo obtener perfil:", respuestaModel);
        return respuestaModel;
      }

      if (!respuestaModel.data) {
        console.error("‚ùå Usuario no encontrado:", userId);
        return FormatterResponseService.notFound("Usuario", userId);
      }

      const user = respuestaModel.data;

      // Remover informaci√≥n sensible antes de enviar
      const { password, ...userSafe } = user;

      console.log(
        "‚úÖ Perfil obtenido exitosamente para:",
        user.nombres,
        user.apellidos
      );

      return FormatterResponseService.success(
        userSafe,
        "Perfil obtenido exitosamente",
        {
          status: 200,
          title: "Perfil de Usuario",
        }
      );
    } catch (error) {
      console.error("üí• Error en servicio obtener perfil:", error);
      // Re-lanza el error para que el controlador lo maneje
      throw error;
    }
  }

  /**
   * @static
   * @async
   * @method actualizarPerfil
   * @description Actualizar perfil del usuario
   * @param {number} userId - ID del usuario
   * @param {Object} datosActualizacion - Datos a actualizar
   * @returns {Object} Resultado de la operaci√≥n
   */
  static async actualizarPerfil(userId, datosActualizacion) {
    try {
      console.log(
        "üîç [actualizarPerfil] Actualizando perfil para usuario:",
        userId
      );

      if (process.env.MODE === "DEVELOPMENT") {
        console.log(
          "üìù Datos de actualizaci√≥n:",
          JSON.stringify(datosActualizacion, null, 2)
        );
      }

      // Validar ID de usuario
      const idValidation = ValidationService.validateId(userId, "usuario");
      if (!idValidation.isValid) {
        console.error("‚ùå Validaci√≥n de ID fallida:", idValidation.errors);
        return FormatterResponseService.validationError(
          idValidation.errors,
          "ID de usuario inv√°lido"
        );
      }

      // Validar datos de actualizaci√≥n
      const validacion =
        ValidationService.validateActualizacionPerfil(datosActualizacion);
      if (!validacion.isValid) {
        console.error(
          "‚ùå Validaci√≥n de actualizaci√≥n fallida:",
          validacion.errors
        );
        return FormatterResponseService.validationError(
          validacion.errors,
          "Error de validaci√≥n en actualizaci√≥n de perfil"
        );
      }

      const respuestaModel = await UserModel.actualizarUsuario(
        userId,
        datosActualizacion
      );

      if (FormatterResponseService.isError(respuestaModel)) {
        console.error("‚ùå Error en modelo actualizar perfil:", respuestaModel);
        return respuestaModel;
      }

      console.log("‚úÖ Perfil actualizado exitosamente para usuario:", userId);

      return FormatterResponseService.success(
        respuestaModel.data,
        "Perfil actualizado exitosamente",
        {
          status: 200,
          title: "Perfil Actualizado",
        }
      );
    } catch (error) {
      console.error("üí• Error en servicio actualizar perfil:", error);

      if (error.name === "ValidationError") {
        return FormatterResponseService.validationError(
          error.details,
          error.message
        );
      }

      // Re-lanza el error para que el controlador lo maneje
      throw error;
    }
  }

  /**
   * @static
   * @async
   * @method cerrarSesion
   * @description Cerrar sesi√≥n del usuario
   * @returns {Object} Resultado de la operaci√≥n
   */
  static async cerrarSesion() {
    try {
      console.log("üîç [cerrarSesion] Cerrando sesi√≥n...");

      // En un sistema m√°s complejo, aqu√≠ podr√≠as invalidar tokens, etc.
      // Por ahora simplemente retornamos √©xito ya que el controlador se encarga de limpiar la cookie

      return FormatterResponseService.success(
        null,
        "Sesi√≥n cerrada exitosamente",
        {
          status: 200,
          title: "Sesi√≥n Cerrada",
        }
      );
    } catch (error) {
      console.error("üí• Error en servicio cerrar sesi√≥n:", error);
      // Re-lanza el error para que el controlador lo maneje
      throw error;
    }
  }
}
